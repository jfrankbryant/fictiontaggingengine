Removed code
#based on the variability of tags, it'll be most efficient to download csvs from AO3 and append the story text 
soup_0005 = BeautifulSoup(open('Fanfic_HTML/0005.html'), "html.parser")
soup_13Heirs = BeautifulSoup(open('Fanfic_HTML/13 Heirs.html'), "html.parser")
soup_WizardComes = BeautifulSoup(open('Fanfic_HTML/In Which A Wizard Comes.html'), "html.parser")

print(len(soup_0005.find(class_="tags")))
print(len(soup_13Heirs.find(class_="tags")))
print(len(soup_WizardComes.find(class_="tags")))

tags = (soup_0005.find(class_="tags"))
tags

"""def extractTagsClass(soup_obj):
    #code to extract metadata (fandom, characters, tags, warning, etc.)
    i = 0
    for element in soup_obj.find(class_="tags"):
        if i == 3:
            story_rating = element.string
        elif i == 7:
            story_archive_warning = element.string
        elif i == 11:
            story_category = element.string
        elif i == 15:
            raw_fandom_text = element.find_all('a')
            for obj in raw_fandom_text:
                fandom_text += obj.string + ", "
            fandom_text = fandom_text[:-2]
        elif i == 19:
            story_character = element.string
        elif i == 23:
            additionalTags = element.find_all('a')
            for obj in additionalTags:
                additionalTags_text += obj.string + ", "
            additionalTags_text = additionalTags_text[:-2]
        elif i == 27:
            story_series_name = element.find('a').string
        elif i == 31:
            story_collections = element.string
        elif i == 35:
            pub_stat = str(element.string).strip()
            story_publish_date = pub_stat[11:21]
            story_word_count = pub_stat[37:40]
        i += 1
   
    return story_character, fandom_text, additionalTags_text, story_rating, story_archive_warning, story_category, story_series_name, story_collections, story_publish_date, story_word_count"""
    
soup_SwineForests = BeautifulSoup(open('Fanfic_HTML/Swine and Forests.html'), "html.parser")
soup_SwineForests

print(soup_SwineForests.title)

print(soup_SwineForests.title.string.split('-'))

print(soup_WizardComes.find(class_="tags"))

def extractFandoms(element):
    #code to extract fandoms
    raw_fandom_text = element.find_all('a')
            for obj in raw_fandom_text:
                fandom_text += obj.string + ", "
            fandom_text = fandom_text[:-2]
    print(fandom_text)

    return fandom_text
                
def extractAddTags(element):
    #code to extract tags
    additionalTags = element.find_all('a')
    for obj in additionalTags:
        additionalTags_text += obj.string + ", "
    additionalTags_text = additionalTags_text[:-2]
    print(additionalTags_text)

    return additionalTags_text
    
def extractStoryRating(element):
    #code to extract story rating
    story_rating = element.string
    print(story_rating)
            
    return story_rating
            
def extractArchiveWarning(element):
    story_archive_warning = element.string
    print(story_archive_warning)

    return story_archive_warning
            
def extractCategory(element):
    #code to extract category
    story_category = element.string
    print(story_category)

    return story_category
            
def extractCharacters(element):
    #code to extract characters
    story_character = element.string
    print(story_character)
            
    return story_character
            
def extractSeries(element):
    story_series_name = element.string
    print(story_series_name)
    
    return story_series_name
    
def extractCollections(element):
    #code to extract collections
    story_collections = element.string
    print(story_collections)
    
    return story_collections

def extractPubStats(element):
    #code to extract publication stats
    pub_stat = str(element.string).strip()
    story_publish_date = pub_stat[11:21]
    story_word_count = pub_stat[37:40]
    print(story_publish_date)
    print(story_word_count)
    
    return story_publish_date, story_word_count
    
tags_dict = {}

def extractTags(soup_obj):
    #code to extract metadata (fandom, characters, tags, warning, etc.)
    fandom_text = ""
    additionalTags_text = ""
    rating = np.nan
    archiveWarning = np.nan
    category = np.nan
    fandoms = np.nan
    characters = np.nan
    series = np.nan
    collections = np.nan
    pubDate = np.nan
    wordCount = np.nan
    tags = soup_obj.find(class_="tags")
    for element in tags:
        if tags.find(text="Rating:") == "Rating:":
            rating = extractStoryRating(element)
        
        elif tags.find(text="Archive Warning:") == "Archive Warning:":
            archiveWarning = extractArchiveWarning(element)
        
        elif tags.find(text="Category:") == "Category:":
            category = extractCategory(element)
        
        elif tags.find(text="Fandom:") == "Fandom:":
            fandoms = extractFandoms(element)
            
        elif tags.find(text="Character:") == "Character:":
            characters = extractCharacters(element)
            
        elif tags.find(text="Additional Tags:") == "Additional Tags:":
            additionalTags_text = extractAddTags(element)
                
        elif tags.find(text="Series:") == "Series:":
            series = extractSeries(element)
                
        elif tags.find(text="Collections:") == "Collections:":
            collections = extractCollections(element)
            
        elif tags.find(text="Stats:") == "Stats:":
            pubDate, wordCount = extractPubStats(element)
        
        tags_dict["archive_warning"] = archiveWarning
        tags_dict["category"] = category
        tags_dict["fandoms"] = fandoms
        tags_dict["characters"] = characters
        tags_dict["additional_tags"] = additionalTags_text
        tags_dict['rating'] = rating
        tags_dict["series"] = series
        tags_dict["collections"] = collections
        tags_dict["publish_date"] = pubDate 
        tags_dict["word_count"] = wordCount
    
    return tags_dict

tags_dictionary = extractTags(soup_0005)
tags_dictionary

character, fandom_text, additionalTags_text, story_rating, story_archive_warning, story_category, story_series_name, story_collections, story_publish_date, story_word_count = extractTags(soup)

story_publish_date

#code from https://www.geeksforgeeks.org/how-to-convert-python-dictionary-to-json/    
# Serializing json    
json_object = json.dumps(ao3_data, indent = 4)   
print(json_object)

ao3_df = pd.read_json(json_object, orient='columns')